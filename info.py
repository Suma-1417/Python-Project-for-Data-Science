# -*- coding: utf-8 -*-
"""info.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/Suma-1417/cd07087b5940e66750c325b1b3f89f85/info.ipynb
"""

# üì¶ Install required libraries
!pip install yfinance
!pip install lxml
!pip install beautifulsoup4


# üìÅ Import libraries
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt

# üìä Question 1: Extract Tesla Stock Data
tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="max")
tesla_data.reset_index(inplace=True)
print("Tesla Stock Data:")
print(tesla_data.head())

#Question 2:Tesla Revenue Data (Web Scraping)

import pandas as pd
import requests
from bs4 import BeautifulSoup

# Use IBM's static revenue page
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text
soup = BeautifulSoup(html_data, "html.parser")

# Find all tables
tables = soup.find_all("table")

# Extract Tesla revenue table
tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])
for table in tables:
    if "Tesla Quarterly Revenue" in table.text:
        df = pd.read_html(str(table))[0]
        tesla_revenue = df.rename(columns={df.columns[0]: "Date", df.columns[1]: "Revenue"})
        tesla_revenue.dropna(inplace=True)
        break

# Clean revenue column
tesla_revenue["Revenue"] = tesla_revenue["Revenue"].replace('[\$,]', '', regex=True).astype(float)

# Display last few rows
print("Tesla Revenue Data:")
print(tesla_revenue.tail())

# üìä Question 3: Extract GameStop Stock Data
gme = yf.Ticker("GME")
gme_data = gme.history(period="max")
gme_data.reset_index(inplace=True)
print("GameStop Stock Data:")
print(gme_data.head())

# üåê Question 4: Extract GameStop Revenue Data
import requests
from bs4 import BeautifulSoup
import pandas as pd

url = "https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue"
headers = {"User-Agent": "Mozilla/5.0"}
html = requests.get(url, headers=headers).text
soup = BeautifulSoup(html, "html.parser")

tables = soup.find_all("table")
for table in tables:
    if "Quarterly Revenue" in table.get_text():
        df = pd.read_html(str(table))[0]
        break

df.columns = ["Date", "Revenue"]
df["Revenue"] = df["Revenue"].replace("[\$,]", "", regex=True).astype(float)
df["Date"] = pd.to_datetime(df["Date"])
print(df.tail())

# üìà Question 5 & 6: Plotting Function
def make_graph(stock_data, revenue_data, stock_name):
    fig, ax1 = plt.subplots(figsize=(12,6))

    ax1.plot(stock_data['Date'], stock_data['Close'], label='Stock Price', color='blue')
    ax1.set_xlabel('Date')
    ax1.set_ylabel('Stock Price (USD)', color='blue')
    ax1.tick_params(axis='y', labelcolor='blue')
    ax1.set_title(f"{stock_name} Stock Price vs Revenue")

    ax2 = ax1.twinx()
    # Ensure revenue_data has data before plotting
    if not revenue_data.empty:
        ax2.plot(pd.to_datetime(revenue_data['Date']), revenue_data['Revenue'].str.replace(',', '').astype(float),
                 label='Revenue', color='orange')
        ax2.set_ylabel('Revenue (Millions USD)', color='orange')
        ax2.tick_params(axis='y', labelcolor='orange')
    else:
        print(f"No revenue data available for {stock_name} to plot.")


    fig.tight_layout()
    plt.legend()
    plt.show()

# üìà Question 5: Tesla Graph
make_graph(tesla_data, tesla_revenue, "Tesla")

gme_revenue = df

# üìà Question 6: GameStop Graph
make_graph(gme_data, gme_revenue, "GameStop")

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd

def make_graph(stock_data, revenue_data, stock_name):
    fig, ax1 = plt.subplots(figsize=(12, 6))

    # Plot stock price
    ax1.plot(stock_data['Date'], stock_data['Close'], label='Stock Price', color='blue')
    ax1.set_xlabel('Date')
    ax1.set_ylabel('Stock Price (USD)', color='blue')
    ax1.tick_params(axis='y', labelcolor='blue')
    ax1.set_title(f"{stock_name} Stock Price vs Revenue")
    ax1.grid(True, which='major', linestyle='--', alpha=0.6)
    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
    fig.autofmt_xdate()

    # Twin axis for revenue
    ax2 = ax1.twinx()

    if not revenue_data.empty:
        # Ensure 'Date' column is datetime
        revenue_data['Date'] = pd.to_datetime(revenue_data['Date'])
        # Ensure 'Revenue' column is numeric
        revenue_data['Revenue'] = pd.to_numeric(revenue_data['Revenue'], errors='coerce')
        ax2.plot(revenue_data['Date'], revenue_data['Revenue'], label='Revenue', color='orange')
        ax2.set_ylabel('Revenue (Millions USD)', color='orange')
        ax2.tick_params(axis='y', labelcolor='orange')

        # Optional: annotate revenue points
        for index, row in revenue_data.iterrows():
            if pd.notna(row['Revenue']): # Check for NaN values before annotating
                 ax2.annotate(f"{row['Revenue']:.0f}", (row['Date'], row['Revenue']),
                         textcoords="offset points", xytext=(0, 10), ha='center', fontsize=8)
    else:
        print(f"No revenue data available for {stock_name} to plot.")

    # Combine legends
    lines_1, labels_1 = ax1.get_legend_handles_labels()
    lines_2, labels_2 = ax2.get_legend_handles_labels()
    ax1.legend(lines_1 + lines_2, labels_1 + labels_2, loc='upper left')

    fig.tight_layout()
    plt.show()

